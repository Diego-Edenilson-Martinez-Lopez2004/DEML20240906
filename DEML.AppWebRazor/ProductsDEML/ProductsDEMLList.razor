@page "/product-list"
@using DEML.DTOs.ProductsDEMLDTOs;
@using System.Text.Json;
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Forms;
@using DEML.AppWebRazor.Data;

<h3>Buscar Producto</h3>
<EditForm Model="@searchQuery" OnValidSubmit="SubmitSearch">
    <div class="row">
        <div class="col-3">
            <div class="form-group">
                <label for="Nombre">Nombre:</label>
                <InputText class="form-control" @bind-Value="@searchQuery.NombreDEML_Like" />
            </div>
        </div>
        <div class="col-3">
            <div class="form-group">
                <label for="Descripcion">Descripcion:</label>
                <InputText class="form-control" @bind-Value="@searchQuery.DescripcionDEML_Like" />
            </div>
        </div>
        
        <div class="col-2">
            <div class="form-group">
                <label for="Take">Cantidad Reg.</label>
                <select class="form-control" @bind="@searchQuery.Take">
                    @for (var i = 10; i < 1000; i += 10)
                    {
                        <option value="@i">@i</option>
                    }
                </select>
            </div>
        </div>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">Buscar</button>
    <NavLink href="/create-product" class="btn btn-secondary">Registrar</NavLink>
    <br />
</EditForm>

<br />
<h3>Lista de Productos</h3>
<div class="row" style="overflow:auto !important;max-width:600px">
    <nav aria-label="Page navigation example">
        <ul class="pagination">
            <li class="page-item">
                <button class="page-link" @onclick="async () => await PaginationSearch(skipAnte)">Anterior</button>
            </li>
            @foreach (var item in paginations)
            {
                <li class="page-item @(item.Skip == searchQuery.Skip ? "active" : "")">
                    <button class="page-link" @onclick="async () => await PaginationSearch(item.Skip)">@item.NumPage</button>
                </li>
            }
            <li class="page-item">
                <button class="page-link" @onclick="async () => await PaginationSearch(skipSi)">Siguiente</button>
            </li>
        </ul>
    </nav>
</div>

<div class="row">
    <div class="col-md-6">
        <span class="fw-bold">Total registros: <span class="badge bg-primary">@searchResult.CountRow</span></span>
    </div>
</div>

@if (searchResult?.Data?.Count > 0)
{
    <div class="row" style="margin-top:10px;">
        <div class="table-responsive col-md-12">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>Nombre</th>
                        <th>Descripción</th>
                        <th>Precio</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var product in searchResult.Data)
                    {
                        <tr>
                            <td>@product.NombreDEML</td>
                            <td>@product.DescripcionDEML</td>
                            <td>@product.Precio</td>
                            <td>
                                <button class="btn btn-dark" @onclick="() => GoEdit(product.Id)">Modificar</button>
                                <button class="btn btn-info" @onclick="() => GoDetails(product.Id)">Detalle</button>
                                <button class="btn btn-danger" @onclick="() => GoDelete(product.Id)">Eliminar</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@code {
    [Inject]
    ProductsDEMLService productDEMLService { get; set; }
    [Inject]
    NavigationManager navigation { get; set; }

    SearchResultProductsDEMLDTO searchResult = new SearchResultProductsDEMLDTO();
    SearchQueryProductsDEMLDTO searchQuery = new SearchQueryProductsDEMLDTO{ Take = 10 };
    List<Pagination> paginations = new();
    int skipAnte = 0;
    int skipSi = 0;

    private async Task Search()
    {
        searchResult = await productDEMLService.Search(searchQuery);
    }

    protected override async Task OnInitializedAsync()
    {
        searchQuery.SendRowCount = 2;
        searchQuery.Skip = 0;
        await Search();
        UpdatePagination();
    }

    private async Task SubmitSearch()
    {
        searchQuery.SendRowCount = 2;
        searchQuery.Skip = 0;
        await Search();
        UpdatePagination();
    }

    private async Task PaginationSearch(int skip)
    {
        searchQuery.SendRowCount = 1;
        searchQuery.Skip = skip;
        await Search();
        UpdatePagination();
    }

    private void GoEdit(int productId)
    {
        navigation.NavigateTo($"/edit-product/{productId}");
    }

    private void GoDetails(int productId)
    {
        navigation.NavigateTo($"/product-details/{productId}");
    }

    private void GoDelete(int productId)
    {
        navigation.NavigateTo($"/delete-product/{productId}");
    }

    private void UpdatePagination()
    {
        paginations.Clear();
        int totalPages = (int)Math.Ceiling((double)searchResult.CountRow / searchQuery.Take);
        skipAnte = Math.Max(0, searchQuery.Skip - searchQuery.Take);

        for (var i = 0; i < totalPages; i++)
        {
            paginations.Add(new Pagination
            {
                Skip = i * searchQuery.Take,
                NumPage = i + 1
            });
        }

        skipSi = Math.Min((totalPages - 1) * searchQuery.Take, searchQuery.Skip + searchQuery.Take);
    }

    class Pagination
    {
        public int NumPage { get; set; }
        public int Skip { get; set; }
    }
}